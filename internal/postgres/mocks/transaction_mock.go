// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/domain/repository/transaction.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	dto "go-transactions-gateway/internal/domain/dto"
	entity "go-transactions-gateway/internal/domain/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTransactionsRepository is a mock of TransactionsRepository interface.
type MockTransactionsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTransactionsRepositoryMockRecorder
}

// MockTransactionsRepositoryMockRecorder is the mock recorder for MockTransactionsRepository.
type MockTransactionsRepositoryMockRecorder struct {
	mock *MockTransactionsRepository
}

// NewMockTransactionsRepository creates a new mock instance.
func NewMockTransactionsRepository(ctrl *gomock.Controller) *MockTransactionsRepository {
	mock := &MockTransactionsRepository{ctrl: ctrl}
	mock.recorder = &MockTransactionsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTransactionsRepository) EXPECT() *MockTransactionsRepositoryMockRecorder {
	return m.recorder
}

// FindByUserID mocks base method.
func (m *MockTransactionsRepository) FindByUserID(arg0 context.Context, arg1 dto.GetTransactionsRequest) ([]entity.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUserID", arg0, arg1)
	ret0, _ := ret[0].([]entity.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByUserID indicates an expected call of FindByUserID.
func (mr *MockTransactionsRepositoryMockRecorder) FindByUserID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUserID", reflect.TypeOf((*MockTransactionsRepository)(nil).FindByUserID), arg0, arg1)
}
